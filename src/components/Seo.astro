---
export interface Props {
  title: string;
  description: string;
  pubDate?: Date | string;        // provide on blog posts
  updatedDate?: Date | string;
  tags?: string[];
  hero?: { src: string; alt?: string };
  canonical?: string;
  ogImage?: string;               // optional per-page override
  noindex?: boolean;
  faq?: { q: string; a: string }[];
  howTo?: { title: string; steps: string[] };
  video?: {
    url: string; name: string; description: string; thumbnailUrl: string;
    uploadDate: Date | string; durationISO?: string;
  };
}

const props = Astro.props as Props;

// 0) Site base + defaults
const base = (Astro.site?.toString?.() || 'https://digissential.co.za').replace(/\/+$/,'');
const DEFAULT_OG = '/images/social/default-og.jpg'; // 1200x630 JPG/PNG you add

// 1) Canonical with trailing slash
const pathWithSlash = Astro.url.pathname.endsWith('/') ? Astro.url.pathname : Astro.url.pathname + '/';
const canonicalUrl = props.canonical ?? `${base}${pathWithSlash}`;

// 2) Choose OG image (explicit > hero > default) and make absolute
const chosenOg = props.ogImage ?? props.hero?.src ?? DEFAULT_OG;
const absOg = new URL(chosenOg, base + '/').toString();
const ogAlt = props.title;

// 3) Page type: posts get "article", everything else "website"
const isArticle = Boolean(props.pubDate);
const ogType = isArticle ? 'article' : 'website';

// 4) JSON-LD
const ld: any[] = [];

if (isArticle) {
  // BlogPosting only for real posts
  ld.push({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": props.title,
    "description": props.description,
    "datePublished": new Date(props.pubDate!).toISOString(),
    ...(props.updatedDate ? { "dateModified": new Date(props.updatedDate).toISOString() } : {}),
    "mainEntityOfPage": canonicalUrl,
    "image": [absOg],
    "author": [{ "@type": "Organization", "name": "Digissential" }],
    "publisher": {
      "@type": "Organization",
      "name": "Digissential",
      "logo": { "@type": "ImageObject",
       "url": Astro.site ? new URL("/images/logo-1200.png", Astro.site).toString() : "/images/logo-1200.png",
       "width": 1200,
       "height": 1200
      }
    }
  });
} else {
  // Minimal WebPage for non-post pages
  ld.push({
    "@context": "https://schema.org",
    "@type": "WebPage",
    "name": props.title,
    "description": props.description,
    "url": canonicalUrl
  });
}

// Optional rich results you already support:
if (Array.isArray(props.faq) && props.faq.length) {
  ld.push({
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": props.faq.map((f) => ({
      "@type": "Question",
      "name": f.q,
      "acceptedAnswer": { "@type": "Answer", "text": f.a }
    }))
  });
}
if (props.howTo?.steps?.length) {
  ld.push({
    "@context": "https://schema.org",
    "@type": "HowTo",
    "name": props.howTo.title,
    "step": props.howTo.steps.map((s, i) => ({ "@type": "HowToStep", "position": i + 1, "name": s }))
  });
}
if (props.video?.url) {
  ld.push({
    "@context": "https://schema.org",
    "@type": "VideoObject",
    "name": props.video.name,
    "description": props.video.description,
    "thumbnailUrl": [props.video.thumbnailUrl],
    "uploadDate": new Date(props.video.uploadDate).toISOString(),
    "contentUrl": props.video.url,
    "embedUrl": props.video.url,
    ...(props.video.durationISO ? { "duration": props.video.durationISO } : {})
  });
}
---

<title>{props.title}</title>
<meta name="description" content={props.description} />

<!-- Allow big thumbnails in Search -->
<meta name="robots" content={props.noindex ? "noindex, nofollow" : "index, follow, max-image-preview:large"} />

<link rel="canonical" href={canonicalUrl} />

<!-- Open Graph -->
<meta property="og:type" content={ogType} />
<meta property="og:title" content={props.title} />
<meta property="og:description" content={props.description} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:image" content={absOg} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:type" content="image/jpeg" />
<meta property="og:image:alt" content={ogAlt} />

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={props.title} />
<meta name="twitter:description" content={props.description} />
<meta name="twitter:image" content={absOg} />

<script type="application/ld+json" set:html={JSON.stringify(ld)} />

---
import Base from '@layouts/Base.astro';
import Breadcrumbs from '@components/Breadcrumbs.astro';
import RateBanner from '@components/RateBanner.astro';
import { getCollection } from 'astro:content';
import { mediaForService, missingMedia } from '@lib/serviceMedia';

/* ── Data ─────────────────────────────────────────────────────────────── */
const all = (await getCollection('services'))
  .map(e => ({ ...e, data: { ...e.data } }))
  .sort((a, b) => (a.data.title || '').localeCompare(b.data.title || ''));

const groups: Record<string, typeof all> = {};
for (const e of all) (groups[e.data.category || 'Other'] ??= []).push(e);
const cats = Object.keys(groups).sort();

const toId = (s: string) =>
  (s || 'other').toLowerCase().normalize('NFKD')
    .replace(/[^\w\s-]/g, '').trim().replace(/\s+/g, '-');

const seen = new Set<string>();
const catIds = Object.fromEntries(
  cats.map(c => {
    let id = toId(c), i = 2;
    while (seen.has(id)) id = `${toId(c)}-${i++}`;
    seen.add(id);
    return [c, id] as const;
  })
);

const getPriceNum = (p: unknown) => {
  if (p == null) return '';
  const n = Number(String(p).replace(/[^\d.]/g, ''));
  return Number.isFinite(n) ? n : '';
};

const fmtPrice = (p: unknown) => {
  if (p == null) return '';
  if (typeof p === 'number' && Number.isFinite(p)) return `R${p}`;
  const s = String(p).trim();
  if (/^\s*r\s*\d/i.test(s)) return s.replace(/^\s*r\s*/i, 'R');
  if (/^\d+([.,]\d+)?$/.test(s)) return `R${s}`;
  return s;
};

/* ── JSON-LD (ItemList) ───────────────────────────────────────────────── */
const site = (Astro.site?.toString?.() || import.meta.env.PUBLIC_SITE_URL || 'https://digissential.co.za').replace(/\/+$/, '');
const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  itemListElement: all.map((e, i) => {
    const m = mediaForService(e.slug, e.slug, e.data.title);
    return {
      "@type": "ListItem",
      position: i + 1,
      name: e.data.title,
      url: new URL(`/services/${e.slug}/`, site).toString(),
      ...(m?.src ? { image: new URL(m.src, site).toString() } : {}),
    };
  }),
};

/* ── Dev helper: log any slugs missing media mapping ──────────────────── */
if (import.meta.env.DEV) {
  const missing = missingMedia(all.map(e => e.slug));
  if (missing.length) console.warn('[services] Missing media for slugs:', missing);
}
---

<script type="application/ld+json" set:html={JSON.stringify(itemListLd)} />

<Base title="Services — Digissential" description="Our full list of computer repair & IT support services in Stellenbosch.">
  <main class="container-prose pt-6">
    <Breadcrumbs items={[{ href: '/services/', label: 'Services' }]} />

    <header class="mt-6">
      <h1 class="text-3xl sm:text-4xl font-extrabold">Services</h1>
      <RateBanner emitLd={true} />
    </header>

    <!-- Filter toolbar -->
    <section class="mt-6 card p-4 md:p-5">
      <form id="filters" class="mt-6 grid gap-4 md:grid-cols-[1fr,240px,240px,auto] items-end">
        <label class="text-sm">
          Search
          <input id="q" name="q"
            class="mt-1 w-full rounded-2xl bg-white/10 px-3 py-2 outline-none focus:ring-2 focus:ring-digi-primary"
            type="search" placeholder="Type a service, keyword, or issue…" autocomplete="off" />
        </label>

        <label class="text-sm">
          Category
          <select id="cat" name="cat"
            class="mt-1 w-full rounded-2xl bg-white/10 px-3 py-2 outline-none focus:ring-2 focus:ring-digi-primary">
            <option value="">All categories</option>
            {cats.map(c => <option value={c}>{c}</option>)}
          </select>
        </label>

        <label class="text-sm">
          Price
          <select id="price" name="price"
            class="mt-1 w-full rounded-2xl bg-white/10 px-3 py-2 outline-none focus:ring-2 focus:ring-digi-primary">
            <option value="">Any price</option>
            <option value="lt500">&lt; R500</option>
            <option value="500-1000">R500–R1000</option>
            <option value="gt1000">&gt; R1000</option>
          </select>
        </label>

        <button type="reset" class="btn btn-outline w-full md:w-auto">Clear</button>
      </form>

      <p class="mt-3 text-sm text-white/60" aria-live="polite" aria-atomic="true">
        <span id="result-count">{all.length}</span> services
      </p>
    </section>

    <!-- Results by category (with thumbnails) -->
    <section class="mt-8 grid gap-10">
      {cats.map((c) => (
        <section id={catIds[c]} class="svc-group scroll-mt-24">
          <h2 class="text-2xl font-bold mb-4">{c}</h2>

          <div class="grid gap-4 md:grid-cols-2">
            {groups[c].map((e) => {
              const keywords = [
                e.data.summary || '',
                ...(Array.isArray(e.data.bullets) ? e.data.bullets : []),
              ].join(' ').toLowerCase();

              const priceNum = getPriceNum(e.data.price);
              const m = mediaForService(e.slug, e.slug, e.data.title);
              const thumb = m?.src;
              const altText = m?.alt || `${e.data.title} — Digissential`;

              return (
                <article
                  class="card p-0 overflow-hidden spotlight h-full flex flex-col svc"
                  data-title={(e.data.title || '').toLowerCase()}
                  data-keywords={keywords}
                  data-cat={e.data.category || 'Other'}
                  data-price={String(priceNum)}
                >
                  {thumb && (
                    <figure class="not-prose">
                      <img
                        src={thumb}
                        alt={altText}
                        width="800"
                        height="450"
                        loading="lazy"
                        decoding="async"
                        sizes="(min-width: 768px) 50vw, 100vw"
                        class="block w-full aspect-[16/9] object-cover"
                      />
                    </figure>
                  )}

                  <div class="p-5 grow flex flex-col">
                    <h3 class="text-lg font-semibold">
                      <a class="hover:text-white link-fancy" href={`/services/${e.slug}/`}>{e.data.title}</a>
                    </h3>
                    <p class="mt-1 text-white/70 text-sm">{e.data.summary}</p>

                    {e.data.bullets?.length > 0 && (
                      <ul class="mt-3 list-disc pl-5 text-sm text-white/80">
                        {e.data.bullets.slice(0, 3).map((b: string) => <li>{b}</li>)}
                      </ul>
                    )}

                    <div class="mt-4 flex items-center justify-between text-sm">
                      <a class="btn btn-outline" href={`/services/${e.slug}/`}>View details</a>
                      <span class="text-white/80">{fmtPrice(e.data.price) ? `From ${fmtPrice(e.data.price)}` : 'Get a quote'}</span>
                    </div>
                  </div>
                </article>
              );
            })}
          </div>
        </section>
      ))}

      <p id="no-results" class="hidden text-white/60">No services match your filters.</p>
    </section>
  </main>

  <script>
    (() => {
      const $  = (s) => document.querySelector(s);
      const $$ = (s) => Array.from(document.querySelectorAll(s));

      const form  = $('#filters');
      if (!form) return;

      const q     = $('#q');
      const cat   = $('#cat');
      const price = $('#price');
      const cards = $$('.svc');
      const countEl = $('#result-count');

      const norm = (s) => (s || '').toLowerCase().trim();
      const getAttr = (el, name) => (el.getAttribute(name) || '');

      form.addEventListener('submit', (e) => e.preventDefault());
      q?.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); apply(); } });
      q?.addEventListener('search', () => apply());

      function matchPrice(filter, p) {
        if (!filter) return true;
        const n = Number(p || 0);
        if (!Number.isFinite(n) || n <= 0) return false;
        if (filter === 'lt500')    return n < 500;
        if (filter === '500-1000') return n >= 500 && n <= 1000;
        if (filter === 'gt1000')   return n > 1000;
        return true;
      }

      function updateGroupVisibility() {
        document.querySelectorAll('.svc-group').forEach(group => {
          const anyVisible = Array.from(group.querySelectorAll('.svc'))
            .some(card => !card.classList.contains('hidden'));
          group.classList.toggle('hidden', !anyVisible);
        });
        const allHidden = Array.from(document.querySelectorAll('.svc-group'))
          .every(g => g.classList.contains('hidden'));
        const empty = document.querySelector('#no-results');
        if (empty) empty.classList.toggle('hidden', !allHidden);
      }

      function apply() {
        const qs = norm(q?.value);
        const c  = cat?.value || '';
        const pv = price?.value || '';

        let shown = 0;
        cards.forEach(card => {
          const t    = norm(getAttr(card, 'data-title'));
          const k    = norm(getAttr(card, 'data-keywords'));
          const catv = getAttr(card, 'data-cat');
          const p    = getAttr(card, 'data-price');

          const ok =
            (!qs || t.includes(qs) || k.includes(qs)) &&
            (!c  || c === catv) &&
            matchPrice(pv, p);

          card.classList.toggle('hidden', !ok);
          if (ok) shown++;
        });

        if (countEl) countEl.textContent = String(shown);
        updateGroupVisibility();
      }

      function debounce(fn, ms = 120) {
        let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
      }
      q?.addEventListener('input', debounce(apply, 150));
      cat?.addEventListener('change', apply);
      price?.addEventListener('change', apply);
      form.addEventListener('reset', () => setTimeout(apply, 0));
      apply();
    })();
  </script>

  <style is:global>
    #filters select { color: rgba(255,255,255,.92); }
    #filters option { color: #0b1220; background: #ffffff; }
  </style>
</Base>

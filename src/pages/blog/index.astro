---
import Base from '@layouts/Base.astro';
import Breadcrumbs from '@components/Breadcrumbs.astro';
import { getCollection } from 'astro:content';

// Posts (no drafts), newest first
const posts = (await getCollection('blog'))
  .filter(p => !p.data.draft)
  .sort((a,b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());

// Tag counts
const tagCounts = new Map<string, number>();
for (const p of posts) for (const t of (p.data.tags ?? [])) tagCounts.set(t, (tagCounts.get(t) || 0) + 1);
const tags = Array.from(tagCounts.entries())
  .sort((a,b) => a[0].localeCompare(b[0]))
  .map(([slug, count]) => ({ slug, label: slug.replace(/-/g,' '), count }));

const site = (Astro.site ?? new URL('https://www.digissential.co.za')).toString();
const itemListLd = {
  '@context': 'https://schema.org',
  '@type': 'ItemList',
  itemListElement: posts.map((e, i) => ({
    '@type': 'ListItem',
    position: i + 1,
    url: new URL(`/blog/${e.slug}/`, site).toString(),
    name: e.data.title
  }))
};

const fmtDate = (d: Date) =>
  new Intl.DateTimeFormat('en-ZA', { year: 'numeric', month: 'short', day: '2-digit' }).format(d);

// Optional: where your subscribe button goes
const subscribeHref = '/rss.xml';
---

<Base title="Blog — Digissential" description="Short, practical posts to keep your devices healthy — repair tips, malware hygiene, backup basics, and more.">
  <script type="application/ld+json">{JSON.stringify(itemListLd)}</script>

  <main class="container-prose pt-6">
    <Breadcrumbs items={[ { href: '/blog/', label: 'Blog' } ]} />

    <!-- Hero -->
    <section class="mt-6 card p-6 md:p-8 hero-bg">
      <h1 class="text-3xl md:text-4xl font-extrabold">Blog</h1>
      <p class="mt-2 text-white/75 max-w-2xl">
        Short, practical posts to keep your devices healthy — with repair tips, malware hygiene, backup basics, and more.
      </p>

      <div class="mt-5 flex flex-wrap gap-3 items-center">
        <form id="search" class="flex-1 min-w-[280px] flex gap-2">
          <input id="q" type="search" placeholder="Search posts (e.g., malware, backup, windows)…"
            class="w-full rounded-2xl bg-white/10 px-4 py-2 outline-none focus:ring-2 focus:ring-digi-primary" autocomplete="off" />
          <button class="btn btn-primary">Search</button>
        </form>
        <a href={subscribeHref} class="btn btn-outline">Subscribe</a>
      </div>

      {tags.length > 0 && (
        <ul id="tags" class="mt-4 flex flex-wrap gap-2 text-xs">
          <li><button type="button" data-tag="" aria-pressed="true" class="px-2 py-1 rounded bg-white/10 hover:bg-white/15">All</button></li>
          {tags.map(t => (
            <li><button type="button" data-tag={t.slug} aria-pressed="false" class="px-2 py-1 rounded bg-white/10 hover:bg-white/15">
              {t.label} ({t.count})
            </button></li>
          ))}
        </ul>
      )}
    </section>

    <!-- Posts -->
      <p id="result-count" class="mt-6 text-sm text-white/60" aria-live="polite" aria-atomic="true">
        {posts.length} posts
      </p>
      <section class="mt-2 grid gap-6">
      {posts.map(p => (
        <article class="card p-6 post"
          data-title={(p.data.title || '').toLowerCase()}
          data-summary={(p.data.summary || '').toLowerCase()}
          data-tags={(p.data.tags || []).join(',').toLowerCase()}>
          <h2 class="text-xl font-bold">
            <a href={`/blog/${p.slug}/`} class="hover:underline">{p.data.title}</a>
          </h2>
          <p class="mt-1 text-white/60 text-sm">
            {fmtDate(p.data.pubDate)}
            {p.data.author ? ` · ${p.data.author}` : '' }
          </p>
          {p.data.summary && <p class="mt-3 text-white/80">{p.data.summary}</p>}
          {Array.isArray(p.data.tags) && p.data.tags.length > 0 && (
            <ul class="mt-3 flex gap-2 text-xs">
              {p.data.tags.map(t => <li class="px-2 py-1 rounded bg-white/10">{t}</li>)}
            </ul>
          )}
          <p class="mt-4">
            <a href={`/blog/${p.slug}/`} class="btn btn-outline">Read post</a>
          </p>
        </article>
      ))}
      {posts.length === 0 && <p class="text-white/60">No posts yet.</p>}

      <p id="no-results" class="hidden text-white/60">No posts match your search/tag.</p>
    </section>
  </main>

  <!-- Client-side search + tag filter -->
  <script is:inline>
    const $ = (s) => document.querySelector(s);
    const $$ = (s) => Array.from(document.querySelectorAll(s));
    const q = $('#q');
    const buttons = $$('#tags [data-tag]');
    const cards = $$('.post');
    const countEl = $('#result-count');
    let activeTag = '';

    // read initial state from URL
    const params = new URLSearchParams(location.search);
    cconst initQ = (params.get('q') || '').toLowerCase();
    const initTag = (params.get('tag') || '').toLowerCase();
    if (q) q.value = initQ;
    if (initTag) activeTag = initTag;

    function norm(s){ return (s||'').toLowerCase().trim(); }

    function apply(){
      const qs = norm(q?.value);
      let shown = 0;
      cards.forEach(card => {
        const title = card.dataset.title || '';
        const summ  = card.dataset.summary || '';
        const tags  = card.dataset.tags || '';
        const matchText = !qs || title.includes(qs) || summ.includes(qs);
        const matchTag  = !activeTag || tags.split(',').includes(activeTag);
        const ok = matchText && matchTag;
        card.style.display = ok ? '' : 'none';
        if (ok) shown++;
      });
      if (empty) empty.classList.toggle('hidden', shown !== 0);
      if (countEl) countEl.textContent = `${shown} ${shown === 1 ? 'post' : 'posts'}`;
      // write state to URL (no reload)
      const next = new URL(location.href);
      if (q?.value) next.searchParams.set('q', q.value);
      else next.searchParams.delete('q');
      if (activeTag) next.searchParams.set('tag', activeTag);
      else next.searchParams.delete('tag');
      history.replaceState(null, '', next);
    }

    buttons.forEach(b => {
      b.addEventListener('click', () => {
        activeTag = b.dataset.tag || '';
        // visual state
        buttons.forEach(x => x.classList.remove('ring-2','ring-digi-primary'));
        if (activeTag === '') buttons[0]?.classList.add('ring-2','ring-digi-primary');
        else b.classList.add('ring-2','ring-digi-primary');
        // a11y state
        buttons.forEach(x => x.setAttribute('aria-pressed', String(x === b || (activeTag==='' && x.dataset.tag===''))));
        apply();
      });
    });

    $('#search')?.addEventListener('submit', e => { e.preventDefault(); apply(); });
    q?.addEventListener('input', () => { clearTimeout((q)._t); (q)._t = setTimeout(apply, 120) });

    // default select
    if (!activeTag) {
      buttons[0]?.classList.add('ring-2','ring-digi-primary');
      buttons.forEach(x => x.setAttribute('aria-pressed', String(x === buttons[0])));
    } else {
      const activeBtn = buttons.find(x => x.dataset.tag === activeTag);
      if (activeBtn) {
        activeBtn.classList.add('ring-2','ring-digi-primary');
        buttons.forEach(x => x.setAttribute('aria-pressed', String(x === activeBtn)));
      }
    }
    apply();
  </script>
</Base>
